import os
import cv2
import numpy as np

# Load the pre-trained model to detect faces

face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

model_path = 'face_recognizer_model.yml'
train_path = 'dataset/train'
test_path = 'dataset/test'

model_loaded = False
face_recognizer = cv2.face.LBPHFaceRecognizer_create()

def train():
    if os.path.exists(model_path):
        # Load existing model
        print("Loading saved model...")
        face_recognizer.read(model_path)
    else:
        print("Training model from scratch...")
        face_list = []
        class_list = []
        person_name = os.listdir(train_path)

        for idx, name in enumerate(person_name):
            full_path = os.path.join(train_path, name)

            for img_name in os.listdir(full_path):
                img_full_path = os.path.join(full_path, img_name)
                img = cv2.imread(img_full_path, cv2.IMREAD_GRAYSCALE)

                # Use the model to detect face
                detected_face = face_cascade.detectMultiScale(img, scaleFactor=1.2, minNeighbors=5)

                if len(detected_face) < 1:
                    continue
                # Handle multiple faces
                for face_rect in detected_face:
                    x, y, h, w = face_rect
                    face_img = img[y:y+h, x:x+w]
                    face_list.append(face_img)
                    class_list.append(idx)

        # Train the recognizer
        face_recognizer.train(face_list, np.array(class_list))

        # Save the trained model
        face_recognizer.save(model_path)
        print("Model saved to:", model_path)
    

# Testing phase
def test():
    if model_loaded == False:
        print("Train / read the model first!")
        return
    person_name = os.listdir(train_path)
    for img_name in os.listdir(test_path):
        full_img_path = os.path.join(test_path, img_name)
        img_gray = cv2.imread(full_img_path, cv2.IMREAD_GRAYSCALE)
        img_bgr = cv2.imread(full_img_path)

        detected_face = face_cascade.detectMultiScale(img_gray, scaleFactor=1.2, minNeighbors=5)
        if len(detected_face) < 1:
            continue
        for face_rect in detected_face:
            x, y, h, w = face_rect
            face_img = img_gray[y:y+h, x:x+w]

            # Predict the face
            res, confidence = face_recognizer.predict(face_img)

            # Draw the rectangle and label
            cv2.rectangle(img_bgr, (x, y), (x+w, y+h), (255, 0, 0), 1)
            text = person_name[res] + ' : ' + str(confidence)
            cv2.putText(img_bgr, text, (x, y-10), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)
            cv2.imshow('Result', img_bgr)
            cv2.waitKey(0)

while True:
    print("Menu")
    print("1. Train / read model")
    print("2. Test Model")
    print("3. Exit")
    print(">>", end=" ")
    choice = input()
    if choice == "1":
        train()
        model_loaded = True
    elif choice == "2":
        test()
    elif choice == "3":
        print("Thank you")
        break
    else:
        print("Invalid Input!")


goodluck quiznyaaa
